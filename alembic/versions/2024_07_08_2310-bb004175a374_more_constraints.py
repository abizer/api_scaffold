"""more constraints

Revision ID: bb004175a374
Revises: 06721081382c
Create Date: 2024-07-08 23:10:06.613420

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel # added


# revision identifiers, used by Alembic.
revision: str = 'bb004175a374'
down_revision: Union[str, None] = '06721081382c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_rbac_docs_name'), 'rbac_docs', ['name'], unique=True)
    op.create_unique_constraint(None, 'rbac_docs', ['resource_id'])
    op.create_unique_constraint(None, 'rbac_orgs', ['resource_id'])
    op.create_index(op.f('ix_rbac_projects_name'), 'rbac_projects', ['name'], unique=True)
    op.create_unique_constraint(None, 'rbac_projects', ['resource_id'])
    # ### end Alembic commands ###

    # when a role is deleted, drop all of its associated keys 
    op.drop_constraint('rbac_keys_role_id_fkey', 'rbac_keys', type_='foreignkey')
    op.create_foreign_key('rbac_keys_role_id_fkey', 'rbac_keys', 'rbac_roles', ['role_id'], ['id'], ondelete='CASCADE')
    
    # when a user is deleted, drop all of their keys
    op.drop_constraint('rbac_keys_user_id_fkey', 'rbac_keys', type_='foreignkey')
    op.create_foreign_key('rbac_keys_user_id_fkey', 'rbac_keys', 'rbac_users', ['user_id'], ['id'], ondelete='CASCADE')

    # when a resource is deleted, delete all of its associated orgs, projects, and docs
    op.drop_constraint('rbac_orgs_resource_id_fkey', 'rbac_orgs', type_='foreignkey')
    op.create_foreign_key('rbac_orgs_resource_id_fkey', 'rbac_orgs', 'rbac_resources', ['resource_id'], ['resource_id'], ondelete='CASCADE')

    op.drop_constraint('rbac_projects_resource_id_fkey', 'rbac_projects', type_='foreignkey')
    op.create_foreign_key('rbac_projects_resource_id_fkey', 'rbac_projects', 'rbac_resources', ['resource_id'], ['resource_id'], ondelete='CASCADE')

    op.drop_constraint('rbac_docs_resource_id_fkey', 'rbac_docs', type_='foreignkey')
    op.create_foreign_key('rbac_docs_resource_id_fkey', 'rbac_docs', 'rbac_resources', ['resource_id'], ['resource_id'], ondelete='CASCADE')

    # when a resource is deleted, delete all the role permissions for it
    op.drop_constraint('rbac_role_resource_associations_resource_id_fkey', 'rbac_role_resource_associations', type_='foreignkey')
    op.create_foreign_key('rbac_role_resource_associations_resource_id_fkey', 'rbac_role_resource_associations', 'rbac_resources', ['resource_id'], ['resource_id'], ondelete='CASCADE')

    # when a role is deleted, delete all of its permissions
    op.drop_constraint('rbac_role_resource_associations_role_id_fkey', 'rbac_role_resource_associations', type_='foreignkey')
    op.create_foreign_key('rbac_role_resource_associations_role_id_fkey', 'rbac_role_resource_associations', 'rbac_roles', ['role_id'], ['id'], ondelete='CASCADE')

    # when an org is deleted, delete all its projects
    op.drop_constraint('rbac_projects_organization_id_fkey', 'rbac_projects', type_='foreignkey')
    op.create_foreign_key('rbac_projects_organization_id_fkey', 'rbac_projects', 'rbac_orgs', ['organization_id'], ['id'], ondelete='CASCADE')

    # when a project is deleted, delete all its documents
    op.drop_constraint('rbac_docs_project_id_fkey', 'rbac_docs', type_='foreignkey')
    op.create_foreign_key('rbac_docs_project_id_fkey', 'rbac_docs', 'rbac_projects', ['project_id'], ['id'], ondelete='CASCADE')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'rbac_projects', type_='unique')
    op.drop_index(op.f('ix_rbac_projects_name'), table_name='rbac_projects')
    op.drop_constraint(None, 'rbac_orgs', type_='unique')
    op.drop_constraint(None, 'rbac_docs', type_='unique')
    op.drop_index(op.f('ix_rbac_docs_name'), table_name='rbac_docs')
    # ### end Alembic commands ###

    op.drop_constraint('rbac_keys_role_id_fkey', 'rbac_keys', type_='foreignkey')
    op.create_foreign_key('rbac_keys_role_id_fkey', 'rbac_keys', 'rbac_roles', ['role_id'], ['id'])
    op.drop_constraint('rbac_keys_user_id_fkey', 'rbac_keys', type_='foreignkey')
    op.create_foreign_key('rbac_keys_user_id_fkey', 'rbac_keys', 'rbac_users', ['user_id'], ['id'])

    op.drop_constraint('rbac_orgs_resource_id_fkey', 'rbac_orgs', type_='foreignkey')
    op.create_foreign_key('rbac_orgs_resource_id_fkey', 'rbac_orgs', 'rbac_resources', ['resource_id'], ['resource_id'])

    op.drop_constraint('rbac_projects_resource_id_fkey', 'rbac_projects', type_='foreignkey')
    op.create_foreign_key('rbac_projects_resource_id_fkey', 'rbac_projects', 'rbac_resources', ['resource_id'], ['resource_id'])

    op.drop_constraint('rbac_docs_resource_id_fkey', 'rbac_docs', type_='foreignkey')
    op.create_foreign_key('rbac_docs_resource_id_fkey', 'rbac_docs', 'rbac_resources', ['resource_id'], ['resource_id'])

    op.drop_constraint('rbac_role_resource_associations_resource_id_fkey', 'rbac_role_resource_associations', type_='foreignkey')
    op.create_foreign_key('rbac_role_resource_associations_resource_id_fkey', 'rbac_role_resource_associations', 'rbac_resources', ['resource_id'], ['resource_id'])

    op.drop_constraint('rbac_role_resource_associations_role_id_fkey', 'rbac_role_resource_associations', type_='foreignkey')
    op.create_foreign_key('rbac_role_resource_associations_role_id_fkey', 'rbac_role_resource_associations', 'rbac_roles', ['role_id'], ['id'])

    op.drop_constraint('rbac_projects_organization_id_fkey', 'rbac_projects', type_='foreignkey')
    op.create_foreign_key('rbac_projects_organization_id_fkey', 'rbac_projects', 'rbac_orgs', ['organization_id'], ['id'])

    op.drop_constraint('rbac_docs_project_id_fkey', 'rbac_docs', type_='foreignkey')
    op.create_foreign_key('rbac_docs_project_id_fkey', 'rbac_docs', 'rbac_projects', ['project_id'], ['id'])